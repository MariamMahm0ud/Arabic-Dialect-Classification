# -*- coding: utf-8 -*-
"""Preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kkU2G7UJzlpHKd8A7z6JD7WXtf0j_EnF
"""

'''X_train_path = 'X_train.csv'
X_test_path = 'X_test.csv'
y_train_path = 'y_train.csv'
y_test_path = 'y_test.csv'

X_train = pd.read_csv(X_train_path,encoding='utf-8')
X_test = pd.read_csv(X_test_path,encoding='utf-8')
y_train = pd.read_csv(y_train_path,encoding='utf-8')
y_test = pd.read_csv(y_test_path,encoding='utf-8')
'''

# preprocessing.py

import numpy as np
import pandas as pd
from sklearn.utils.class_weight import compute_class_weight
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer

def preprocess_data(X_train_path, X_test_path, y_train_path, y_test_path, vectorizer_type='tfidf'):
    # Read the cleaned CSV files with UTF-8 encoding
    X_train = pd.read_csv(X_train_path, encoding='utf-8')
    X_test = pd.read_csv(X_test_path, encoding='utf-8')
    y_train = pd.read_csv(y_train_path, encoding='utf-8')
    y_test = pd.read_csv(y_test_path, encoding='utf-8')

    # Ensure y_train and y_test are 1D arrays
    y_train = y_train.values.ravel()
    y_test = y_test.values.ravel()

    # Handle NaN values in text columns by dropping them along with corresponding labels
    X_train = X_train.dropna(subset=['text'])
    X_test = X_test.dropna(subset=['text'])
    y_train = y_train[X_train.index]
    y_test = y_test[X_test.index]

    # Compute class weights for balancing
    classes = np.unique(np.concatenate((y_train, y_test)))
    class_weights = compute_class_weight(class_weight='balanced', classes=classes, y=y_train)
    class_weight_dict = {cls: weight for cls, weight in zip(classes, class_weights)}

    # Choose vectorizer type
    if vectorizer_type == 'tfidf':
        vectorizer = TfidfVectorizer()
    elif vectorizer_type == 'count':
        vectorizer = CountVectorizer()
    else:
        raise ValueError("Unsupported vectorizer type. Choose either 'tfidf' or 'count'.")

    # Vectorize text data
    X_train_vec = vectorizer.fit_transform(X_train['text'])
    X_test_vec = vectorizer.transform(X_test['text'])

    return X_train_vec, X_test_vec, y_train, y_test, class_weight_dict, vectorizer

